# console.py uses the correct weights and biases generated by network.py to classify images from test_images. 
# Authored by azatshtru.
import network

import pickle
import struct
import os

import numpy as np
from PIL import Image

test_images = []

# getting test data.
def get_test_images (req_imgs, generate_images=False):
    _path = "data/t10k-images-idx3-ubyte/t10k-images.idx3-ubyte"
    f = open(_path, 'rb')

    magic_number = f.read(4)
    print(magic_number)

    num_images = struct.unpack('>i', f.read(4))
    print(num_images)

    num_rows = struct.unpack('>i', f.read(4))
    print(num_rows)

    num_columns = struct.unpack('>i', f.read(4))
    print(num_columns)

    if(generate_images): os.mkdir("test_images")

    for i in range(req_imgs):        
        img_array = np.zeros((28, 28), dtype=np.uint8)
        arr = np.zeros((784, 1), dtype=np.uint8)

        a = struct.unpack('>784B', f.read(784))

        for j in range(784):
            if(generate_images): img_array.itemset(j, a[j])
            arr.itemset(j, a[j])

        if(generate_images):
            img = Image.fromarray(img_array)
            img.save("test_images/mnist {0}.png".format(i))
        
        test_images.append(arr)

with open('minima_weights.pkl', 'rb') as mnwt:
    data_weights = pickle.load(mnwt)

with open('minima_biases.pkl', 'rb') as mnbs:
    data_biases = pickle.load(mnbs)

# classifying images.
nn = network.neural_network([784, 40, 10])
nn.weights = data_weights
nn.biases = data_biases

get_test_images(100)

input_image = int(input("Input the index of the image: "))
test_sample = test_images[input_image]

result_list = nn.feed_forward(test_sample)

print(np.argmax(result_list))